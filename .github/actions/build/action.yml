name: 'Build'
description: 'Build and package Synergy'

inputs:
  cmake-args:
    type: string
    required: false
    description: "Additional CMake arguments to pass to the configure step."
  skip-tests:
    type: boolean
    required: false
    description: "Whether to skip running tests. Defaults to false."
  package-prefix:
    type: string
    required: false
    description: "The prefix to use for the package name."

outputs:
  version:
    description: 'The version of the build'
    value: ${{ steps.get-version.outputs.version }}

runs:
  using: 'composite'
  steps:
    - name: Setup variables
      id: vars
      shell: bash
      run: |
        case "${{ runner.os }}" in
          "Windows")
            cmake_args="--preset=windows-release"
            ;;

          "macOS")
            cmake_args="$cmake_args --preset=macos-release"
            cmake_args="$cmake_args -DCMAKE_OSX_SYSROOT=/Applications/Xcode_15.0.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk"
            ;;

          "Linux")
            cmake_args="$cmake_args --preset=linux-release"
            
            if [ "${{ matrix.target.static-libportal }}" == "true" ]; then
              cmake_args="$cmake_args -DSYSTEM_LIBPORTAL=OFF -DSTATIC_LIBPORTAL=ON"
            fi

            cmake_args="$cmake_args -DCMAKE_INSTALL_PREFIX=/usr"
            ;;
        esac

        cmake_args="$cmake_args -DUSE_TOMLPLUSPLUS=OFF -DUSE_CLI11=OFF"
        cmake_args="$cmake_args -DSYNERGY_VERSION_CHECK=${{ vars.SYNERGY_VERSION_CHECK }}"
        cmake_args="$cmake_args ${{ inputs.cmake-args }}"

        echo "cmake-args=$cmake_args" >> $GITHUB_OUTPUT

        if [[ "${{ matrix.target.name }}" == flatpak* ]]; then
          echo "is-flatpak=true" >> $GITHUB_OUTPUT
        fi

        if [[ "${{ github.event.pull_request.draft }}" == "false" && "${{ inputs.package-bin-zip }}" != "true" ]]; then
          echo "package-build=true" >> $GITHUB_OUTPUT
        fi

    - name: Setup Linux
      if: ${{ runner.os == 'Linux' && !steps.vars.outputs.is-flatpak }}
      id: setup-linux
      shell: bash
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        . /etc/os-release
        os=${ID_LIKE}
        if [ -z "$os" ]; then
          os=${ID}
        fi

        echo "Detected Linux: ${os}"
        case "${os}" in
          *debian*)
            apt update
            apt install -y git python3 python3-venv
            ;;

          *fedora*)
            dnf install -y git python3
            ;;

          *suse*)
            zypper refresh
            zypper --non-interactive --no-gpg-checks \
              install -y --force-resolution git python3
            ;;

          *arch*)
            pacman -Syu --noconfirm git python sudo
            useradd -m build
            echo "package-user=build" >> $GITHUB_OUTPUT
            ;;

          *)
            echo "Unsupported Linux: ${os}"
            exit 1
            ;;
        esac

    # By default, workspace dir is not trusted by Git on containers.
    - name: Setup Git (Linux)
      if: ${{ runner.os == 'Linux' }}
      shell: bash
      run: git config --global --add safe.directory $GITHUB_WORKSPACE

    - name: Install dependencies
      if: ${{ !steps.vars.outputs.is-flatpak }}
      id: get-deps
      uses: ./.github/actions/install-deps
      with:
        qt-version: ${{ env.QT_VERSION }}

    - name: Configure
      if: ${{ !steps.vars.outputs.is-flatpak }}
      run: cmake -B build ${{ steps.vars.outputs.cmake-args }} ${{ steps.get-deps.outputs.vcpkg-cmake-config }}

    - name: Build
      if: ${{ !steps.vars.outputs.is-flatpak }}
      run: cmake --build build -j8

    - name: Tests
      if: ${{ !inputs.skip-tests && !steps.vars.outputs.is-flatpak }}
      uses: ./.github/actions/run-tests
      timeout-minutes: 2
      with:
        job: ${{ matrix.target.name }}
        bin-dir: build/bin

    - name: Get version
      if: ${{ !steps.cache-bin.outputs.cache-hit }}
      id: get-version
      uses: ./.github/actions/get-version

    - name: Package (Linux)
      if: ${{ steps.vars.outputs.package-build && !steps.vars.outputs.is-flatpak && runner.os == 'Linux' }}
      run: ./scripts/package.py
      env:
        LINUX_PACKAGE_USER: ${{ steps.setup-linux.outputs.package-user }}

    - name: Package (Flatpak)
      if: ${{ steps.vars.outputs.package-build && steps.vars.outputs.is-flatpak }}
      uses: flatpak/flatpak-github-actions/flatpak-builder@v6
      with:
        bundle: ${{ env.SYNERGY_PACKAGE_PREFIX }}-${{ steps.get-version.outputs.version }}-linux-${{matrix.target.arch}}.flatpak
        manifest-path: res/dist/flatpak/com.symless.synergy.yml
        cache-key: flatpak-builder-${{matrix.target.arch}}-2.0
        arch: ${{matrix.target.arch}}
        upload-artifact: false

    - name: Package (Windows)
      if: ${{ steps.vars.outputs.package-build && runner.os == 'Windows' }}
      run: python ./scripts/package.py
      env:
        WINDOWS_PFX_CERTIFICATE: ${{ secrets.WINDOWS_PFX }}
        WINDOWS_PFX_PASSWORD: ${{ secrets.WINDOWS_PFX_PASS }}

    - name: Package (macOS)
      if: ${{ steps.vars.outputs.package-build && runner.os == 'macOS' }}
      run: ./scripts/package.py
      env:
        APPLE_CODESIGN_ID: ${{ secrets.APPLE_CODESIGN_ID }}
        APPLE_P12_CERTIFICATE: ${{ secrets.APPLE_P12_CERTIFICATE }}
        APPLE_P12_PASSWORD: ${{ secrets.APPLE_P12_PASSWORD }}
        APPLE_NOTARY_USER: ${{ secrets.APPLE_NOTARY_USER }}
        APPLE_NOTARY_PASSWORD: ${{ secrets.APPLE_NOTARY_PASSWORD }}
        APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}

    - name: Copy Flatpak bundle to dist
      if: ${{ steps.vars.outputs.package-build && steps.vars.outputs.is-flatpak }}
      run: |
        mkdir -p dist
        cp *.flatpak dist/
        ls -l dist
